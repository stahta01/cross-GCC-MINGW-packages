From abebbf9aec36979b4f282bdb58d15fe26d7f77f1 Mon Sep 17 00:00:00 2001
From: Tim S <tim.stahlhut@gmail.com>
Date: Fri, 12 Apr 2019 10:06:57 -0400
Subject: Part H of SVN247301

2017-04-27 Tristan Gingold <gingold@adacore.com>

	* raise.c (__gnat_builtin_longjmp): Remove.
	(__gnat_bracktrace):
	Add a dummy definition for the compiler (__gnat_eh_personality,
	__gnat_rcheck_04, __gnat_rcheck_10) (__gnat_rcheck_19,
	__gnat_rcheck_20, __gnat_rcheck_21) (__gnat_rcheck_30,
	__gnat_rcheck_31, __gnat_rcheck_32): Likewise.
	* a-exexpr.adb: Renamed from a-exexpr-gcc.adb
	* a-except.ads, a-except.adb: Renamed from a-except-2005.ads
	and a-except-2005.adb.
	* raise-gcc.c: Allow build in compiler, compiled as a C++
	file.
	(__gnat_Unwind_ForcedUnwind): Adjust prototype.
	(db): Constify msg_format.
	(get_call_site_action_for): Don't use void arithmetic.
	* system.ads (Frontend_Exceptions): Set to False.
	(ZCX_By_Default): Set to True.
	(GCC_ZC_Support): Set to True.
	* gcc-interface/Makefile.in: No more variants for a-exexpr.adb and
	a-except.ad[sb].
	* gcc-interface/Make-lang.in: Add support for backend zcx exceptions
	in gnat1 and gnatbind.
	* gnat1, gnatbind: link with raise-gcc.o, a-exctra.o, s-addima.o,
	s-excmac.o, s-imgint.o, s-traceb.o, s-trasym.o, s-wchstw.o
	* s-excmac.ads, s-excmac.adb: Copy of variants.
	* a-except.o: Adjust preequisites.
	Add handling of s-excmac-arm.adb and s-excmac-gcc.adb.
---
 gcc/ada/gcc-interface/Make-lang.in | 19 +++++++
 gcc/ada/raise-gcc.c                | 29 +++++++----
 gcc/ada/raise.c                    | 81 ++++++++++++++++++++++++------
 3 files changed, 104 insertions(+), 25 deletions(-)

diff --git a/gcc/ada/gcc-interface/Make-lang.in b/gcc/ada/gcc-interface/Make-lang.in
index eb0489b4a50..dc95c4e44be 100644
--- a/gcc/ada/gcc-interface/Make-lang.in
+++ b/gcc/ada/gcc-interface/Make-lang.in
@@ -99,6 +99,8 @@ ADA_TOOLS=gnatbind gnatchop gnat gnatkr gnatlink gnatls gnatmake \
 ada-warn = $(ADA_CFLAGS) $(filter-out -pedantic, $(STRICT_WARN))
 # Unresolved warnings in specific files.
 ada/adaint.o-warn = -Wno-error
+# For unwind-pe.h
+CFLAGS-ada/raise-gcc.o += -I$(srcdir)/../libgcc -Iinclude
 
 ada/%.o: ada/gcc-interface/%.c
 	$(COMPILE) $<
@@ -223,6 +225,7 @@ GCC_LLINK=$(LLINKER) $(GCC_LINKERFLAGS) $(LDFLAGS)
 # Object files for gnat1 from C sources.
 GNAT1_C_OBJS = ada/adadecode.o ada/adaint.o ada/argv.o ada/cio.o \
  ada/cstreams.o ada/env.o ada/init.o ada/initialize.o ada/raise.o \
+ ada/raise-gcc.o \
  ada/seh_init.o ada/targext.o ada/cuintp.o ada/decl.o ada/rtfinal.o \
  ada/rtinit.o ada/misc.o ada/utils.o ada/utils2.o ada/trans.o ada/targtyps.o
 
@@ -514,6 +517,7 @@ GNATBIND_OBJS = \
  ada/osint.o      \
  ada/output.o     \
  ada/raise.o      \
+ ada/raise-gcc.o  \
  ada/restrict.o   \
  ada/rident.o     \
  ada/rtfinal.o    \
@@ -594,6 +598,21 @@ ADA_BACKEND = $(BACKEND) attribs.o
 # List of target dependent sources, overridden below as necessary
 TARGET_ADA_SRCS =
 
+# Select the right s-excmac according to exception layout (Itanium or arm)
+host_cpu=$(word 1, $(subst -, ,$(host)))
+EH_MECHANISM=-gcc
+ifeq ($(strip $(filter-out arm%,$(host_cpu))),)
+EH_MECHANISM=-arm
+endif
+
+ada/s-excmac.o: ada/s-excmac.ads ada/s-excmac.adb
+
+ada/s-excmac.ads: $(srcdir)/ada/s-excmac$(EH_MECHANISM).ads
+	$(CP) $< $@
+
+ada/s-excmac.adb: $(srcdir)/ada/s-excmac$(EH_MECHANISM).adb
+	$(CP) $< $@
+
 # Needs to be built with CC=gcc
 # Since the RTL should be built with the latest compiler, remove the
 #  stamp target in the parent directory whenever gnat1 is rebuilt
diff --git a/gcc/ada/raise-gcc.c b/gcc/ada/raise-gcc.c
index 0074ad53fbc..cb35842b061 100644
--- a/gcc/ada/raise-gcc.c
+++ b/gcc/ada/raise-gcc.c
@@ -6,7 +6,7 @@
  *                                                                          *
  *                          C Implementation File                           *
  *                                                                          *
- *             Copyright (C) 1992-2016, Free Software Foundation, Inc.      *
+ *             Copyright (C) 1992-2017, Free Software Foundation, Inc.      *
  *                                                                          *
  * GNAT is free software;  you can  redistribute it  and/or modify it under *
  * terms of the  GNU General Public License as published  by the Free Soft- *
@@ -32,10 +32,6 @@
 /* Code related to the integration of the GCC mechanism for exception
    handling.  */
 
-#ifndef IN_RTS
-#error "RTS unit only"
-#endif
-
 #ifndef CERT
 #include "tconfig.h"
 #include "tsystem.h"
@@ -45,9 +41,14 @@
 #endif
 
 #include <stdarg.h>
+
+#ifdef __cplusplus
+# include <cstdlib>
+#else
 typedef char bool;
 # define true 1
 # define false 0
+#endif
 
 #include "raise.h"
 
@@ -72,6 +73,10 @@ typedef char bool;
 
 #include "unwind.h"
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 typedef struct _Unwind_Context _Unwind_Context;
 typedef struct _Unwind_Exception _Unwind_Exception;
 
@@ -79,7 +84,7 @@ _Unwind_Reason_Code
 __gnat_Unwind_RaiseException (_Unwind_Exception *);
 
 _Unwind_Reason_Code
-__gnat_Unwind_ForcedUnwind (_Unwind_Exception *, void *, void *);
+__gnat_Unwind_ForcedUnwind (_Unwind_Exception *, _Unwind_Stop_Fn, void *);
 
 extern struct Exception_Occurrence *__gnat_setup_current_excep
  (_Unwind_Exception *);
@@ -209,7 +214,7 @@ db_indent (int requests)
 }
 
 static void ATTRIBUTE_PRINTF_2
-db (int db_code, char * msg_format, ...)
+db (int db_code, const char * msg_format, ...)
 {
   if (db_accepted_codes () & db_code)
     {
@@ -816,8 +821,8 @@ get_call_site_action_for (_Unwind_Ptr ip,
 
       db (DB_CSITE,
 	  "c_site @ %p (+%p), len = %p, lpad @ %p (+%p)\n",
-	  (void *)region->base + cs_start, (void *)cs_start, (void *)cs_len,
-	  (void *)region->lp_base + cs_lp, (void *)cs_lp);
+	  (char *)region->base + cs_start, (void *)cs_start, (void *)cs_len,
+	  (char *)region->lp_base + cs_lp, (void *)cs_lp);
 
       /* The table is sorted, so if we've passed the IP, stop.  */
       if (ip < region->base + cs_start)
@@ -1399,7 +1404,7 @@ __gnat_Unwind_RaiseException (_Unwind_Exception *e)
 
 _Unwind_Reason_Code
 __gnat_Unwind_ForcedUnwind (_Unwind_Exception *e ATTRIBUTE_UNUSED,
-			    void *handler ATTRIBUTE_UNUSED,
+			    _Unwind_Stop_Fn handler ATTRIBUTE_UNUSED,
 			    void *argument ATTRIBUTE_UNUSED)
 {
 #ifdef __USING_SJLJ_EXCEPTIONS__
@@ -1609,3 +1614,7 @@ __gnat_personality_seh0 (PEXCEPTION_RECORD ms_exc, void *this_frame,
 
 const int __gnat_unwind_exception_size = sizeof (_Unwind_Exception);
 #endif
+
+#ifdef __cplusplus
+}
+#endif
diff --git a/gcc/ada/raise.c b/gcc/ada/raise.c
index a61723d10e4..8434b67293d 100644
--- a/gcc/ada/raise.c
+++ b/gcc/ada/raise.c
@@ -6,7 +6,7 @@
  *                                                                          *
  *                          C Implementation File                           *
  *                                                                          *
- *             Copyright (C) 1992-2012, Free Software Foundation, Inc.      *
+ *             Copyright (C) 1992-2017, Free Software Foundation, Inc.      *
  *                                                                          *
  * GNAT is free software;  you can  redistribute it  and/or modify it under *
  * terms of the  GNU General Public License as published  by the Free Soft- *
@@ -47,20 +47,6 @@
 extern "C" {
 #endif
 
-/*  Wrapper to builtin_longjmp.  This is for the compiler eh only, as the sjlj
-    runtime library interfaces directly to the intrinsic.  We can't yet do
-    this for the compiler itself, because this capability relies on changes
-    made in April 2008 and we need to preserve the possibility to bootstrap
-    with an older base version.  */
-
-#if defined (IN_GCC) && !defined (IN_RTS)
-void
-_gnat_builtin_longjmp (void *ptr, int flag ATTRIBUTE_UNUSED)
-{
-   __builtin_longjmp (ptr, 1);
-}
-#endif
-
 /* When an exception is raised for which no handler exists, the procedure
    Ada.Exceptions.Unhandled_Exception is called, which performs the call to
    adafinal to complete finalization, and then prints out the error messages
@@ -84,6 +70,71 @@ __gnat_unhandled_terminate (void)
   __gnat_os_exit (1);
 }
 
+#ifndef IN_RTS
+int
+__gnat_backtrace (void **array ATTRIBUTE_UNUSED,
+                  int size ATTRIBUTE_UNUSED,
+                  void *exclude_min ATTRIBUTE_UNUSED,
+                  void *exclude_max ATTRIBUTE_UNUSED,
+                  int skip_frames ATTRIBUTE_UNUSED)
+{
+  return 0;
+}
+
+void
+__gnat_eh_personality (void)
+{
+  abort ();
+}
+
+void
+__gnat_rcheck_04 (void)
+{
+  abort ();
+}
+
+void
+__gnat_rcheck_10 (void)
+{
+  abort ();
+}
+
+void
+__gnat_rcheck_19 (void)
+{
+  abort ();
+}
+
+void
+__gnat_rcheck_20 (void)
+{
+  abort ();
+}
+
+void
+__gnat_rcheck_21 (void)
+{
+  abort ();
+}
+
+void
+__gnat_rcheck_30 (void)
+{
+  abort ();
+}
+
+void
+__gnat_rcheck_31 (void)
+{
+  abort ();
+}
+
+void
+__gnat_rcheck_32 (void)
+{
+  abort ();
+}
+#endif
 #ifdef __cplusplus
 }
 #endif
-- 
